//Non-tail recursive fibonacci
let rec fib = function
|n when n <= 2 -> 1
  	|n -> fib(n-1) + fib(n-2)

//Tail recursive fibonacci
let fib2 x =
    let rec func(value,acc) =
        match value with
        | 0 -> 0
       	| 1|2 -> acc        
       	| value -> func(value-1,acc) + func(value-2,acc)
    func(x,1)

//Non-recursive Factorial
let rec fact = function
  |n when n < 1 -> 1
  |n -> n*fact(n-1)

//Tail recursive factorial
let fact2 x = 
    let rec func(value,acc) =
        match value with
        |0|1 -> acc
        |_-> func((value-1),(acc*value))
  func(x,1)

//Takes two equal-length lists as input and ”pairs up” the corresponding elements. 
//(If the lists are not of equal length, then raise an exception.)
let rec pairup(list1, list2) =
    match (list1, list2) with
    | (x::xs,y::ys) -> (x,y)::(pairup(xs, ys))
    | (x::xs,[]) -> failwith "Different lengths"
    | ([],y::ys) -> failwith "Different lengths"
    | ([],[]) -> []

//Function to test whether a list has a given length
let testlength (list,n) = List.fold (fun acc x -> acc+1) 0 list = n

//A recursive function sum: int * int -> int where sum(m,n) = m + (m + 1) + (m + 2) + ... + (m + (n - 1)) + (m + n)
let rec sum(m,n) =
    match n with
    | 0 -> m
    | _ -> 1 + sum(m,n - 1)

//a recursive function f: int -> int, where f(n) = 1 + 2 + ... + (n - 1) + n
let rec f(n) =
    match n with
    | 0 -> n
    | _ -> f(n-1) + n

//a function f: int -> bool such that f(n) = true exactly when n is divisible by 2 or divisible by 3 but not divisible by 5. 
let f(n) = (((n % 2 = 0) || (n % 3 = 0)) && (n % 5 <> 0))

//a function that has the type ’a list * ’a list-> bool, where ’a implements comparison
let listEqual(listx, listy) = 
  List.forall2(fun elem1 elem2 -> elem1 = elem2) listx listy

//an F# function notDivisible: int * int -> bool where notDivisible(d,n) is true if and only if d is not a divisor of n.
let notDivisible(d,n) = (n % d) <> 0

//an F# function evenN: int -> int list such that evenN n generates the list of the first n nonnegative even numbers.
let evenN n = 
    let l = [0..(n)]
    l |> List.filter (fun(x) -> x % 2 = 0)

//an F# function revrev working on a list of lists that maps a list to the reversed list of the reversed elements
let revrev listList = 
    let rec reverse lst =
        match lst with
        | [] -> []
        | x::xs -> (reverse xs)@[x]
    List.fold (fun acc x -> (reverse x)::acc ) [] listList
